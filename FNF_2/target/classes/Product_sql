CREATE SEQUENCE product_idx_seq
START WITH 1
MAXVALUE 999999
NOCYCLE;

COMMIT;

--DROP SEQUENCE product_idx_seq;

--TRUNCATE TABLE Product;

CREATE TABLE product
(
   idx               NUMBER(6),
   sellerid            VARCHAR2(20)   NOT NULL,
   pcode         VARCHAR2(20)   NOT NULL,
   pname            VARCHAR2(20)   NOT NULL,
   pcontents	VARCHAR2(2000) NOT NULL,
   origin       VARCHAR2(50)   NOT NULL,
	 unit      VARCHAR2(10)   NOT NULL,
   filename       VARCHAR2(100)   NOT NULL,
   category               VARCHAR2(20)   NOT NULL,
   stock         NUMBER(5)   NOT NULL,
   price      NUMBER(9)               NOT NULL,
   sell_num      NUMBER(6)  DEFAULT 0,
   recomm				NUMBER(1)	DEFAULT 0,
   writedate        DATE   NOT NULL,
   category2    VARCHAR2(20)   NOT NULL,
   CONSTRAINT product_pcode_pk   PRIMARY KEY(pcode)
);

--상품코드 중복 검사
CREATE OR REPLACE PROCEDURE FARM.PRODUCT_CHECK
(
	p_pcode          IN        product.pcode%TYPE,
	product_record     OUT   SYS_REFCURSOR
)
AS
BEGIN
	OPEN product_record FOR
	SELECT pcode
	FROM product
	WHERE pcode = p_pcode;
END;

--상품등록 insert
CREATE OR REPLACE PROCEDURE FARM.PRODUCT_INSERT
(
	p_sellerid			IN			product.sellerid%TYPE,
	p_pcode		IN			product.pcode%TYPE,
	p_pname				IN			product.pname%TYPE,
	p_pcontents				IN			product.pcontents%TYPE,
	p_origin		IN			product.origin%TYPE,
	p_unit		IN			product.unit%TYPE,
	p_filename		IN			product.filename%TYPE,
	p_category		IN			product.category%TYPE,
  p_category2		IN			product.category2%TYPE,
	p_stock		IN			product.stock%TYPE,
	p_price		IN			product.price%TYPE
)
IS
BEGIN
	INSERT INTO Product(idx,sellerid,pcode,pname,pcontents,origin,unit,filename,category,stock,price,writedate,category2)
	VALUES (product_idx_seq.NEXTVAL, p_sellerid, p_pcode, p_pname, p_pcontents, p_origin, p_unit, p_filename, p_category,p_stock,p_price,SYSDATE,p_category2);
	COMMIT;
END;

--상품 하나 select
CREATE OR REPLACE PROCEDURE FARM.PRODUCT_SELECT
(
	p_idx 					IN			product.idx%TYPE,
	product_record			OUT		SYS_REFCURSOR
)
AS
BEGIN
	OPEN product_record FOR
	SELECT * FROM Product
	WHERE idx = p_idx;
END;

--상품 전체 select AS는 호칭붙여주기
CREATE OR REPLACE procedure FARM.PRODUCT_SELECTALL
(
	p_sellerid					IN		product.sellerid%TYPE,
  product_record 			OUT		 SYS_REFCURSOR,
  v_start             IN          NUMBER,
	v_end               IN          NUMBER
)
AS
BEGIN
   OPEN product_record FOR
   SELECT B.idx, pcode, pname, filename, CATEGORY,category2, price, sell_num, writedate
   FROM
   	(SELECT rownum AS rnum, A.idx, A.pcode, A.pname, A.filename, A.CATEGORY, A.category2, A.price, A.sell_num, A.writedate
   FROM
		(SELECT idx, pcode, pname, filename, CATEGORY,category2, price, sell_num, writedate, sellerid
			FROM product ORDER BY writedate DESC) A
			WHERE rownum <= v_end AND sellerid = p_sellerid) B
   WHERE B.rnum >= v_start;
END;

--page total count | INTO는 select값을 변수(컬럼)에 할당해준다
CREATE OR REPLACE PROCEDURE product_seller_total_count
(
	v_sellerid IN		product.sellerid%TYPE,
  v_count OUT Number
)
IS
BEGIN
	SELECT COUNT(*) INTO v_count
  FROM Product
  WHERE sellerid = v_sellerid;
END;

-------------------문의&댓글--------------------
CREATE SEQUENCE seq_inquiry_idx
MAXVALUE 999999

CREATE TABLE inquiry
(
	idx NUMBER(6),
	user_id VARCHAR2(20) NOT NULL,
  pcode VARCHAR2(20) NOT NULL,
	in_contents VARCHAR2(2000) NOT NULL,
	in_writedate DATE DEFAULT SYSDATE,
	CONSTRAINT reply_idx_pk PRIMARY KEY(idx),
	CONSTRAINT reply_user_id_fk FOREIGN KEY(user_id) REFERENCES customer(user_id) ON DELETE CASCADE,
  CONSTRAINT reply_pcode_fk FOREIGN KEY(pcode) REFERENCES product(pcode) ON DELETE CASCADE
)

--Inquiry insert
CREATE OR REPLACE PROCEDURE sp_inquiry_insert
(
	v_user_id IN inquiry.user_id%TYPE,
	v_pcode IN inquiry.pcode%TYPE,
	v_in_contents IN inquiry.in_contents%TYPE
)
IS
BEGIN
	INSERT INTO inquiry (idx, user_id, pcode, in_contents)
	VALUES (seq_inquiry_idx.NEXTVAL, v_user_id, v_pcode, v_in_contents);
	COMMIT;
END;

--Inquiry select
CREATE OR REPLACE PROCEDURE sp_inquiry_select
(
	v_pcode IN inquiry.pcode%TYPE,
	rec_inquiry  OUT  SYS_REFCURSOR
)
AS
BEGIN
	OPEN rec_inquiry FOR
  SELECT idx, user_id, pcode, in_contents, in_writedate
  FROM inquiry
  WHERE pcode = v_pcode
  ORDER BY idx ASC;
END;

--Inquiry 삭제
CREATE OR REPLACE PROCEDURE sp_inquiry_delete
(
	v_idx		IN   inquiry.idx%TYPE
)
IS
BEGIN
	DELETE FROM inquiry WHERE idx = v_idx;
  COMMIT;
END;

--상품 삭제
CREATE OR REPLACE PROCEDURE product_delete
(
	p_idx 	IN 		product.idx%TYPE
)
IS
BEGIN
	DELETE FROM product
  WHERE idx = p_idx;
  COMMIT;
END;

--상품 수정
CREATE OR REPLACE PROCEDURE product_update
(
	p_idx 	IN 		product.idx%TYPE,
  p_pname 	IN 		product.pname%TYPE,
  p_pcontents	IN 		product.pcontents%TYPE,
  p_origin 	IN 		product.origin%TYPE,
  p_unit	IN 		product.unit%TYPE,
  p_filename 	IN 		product.filename%TYPE,
  p_category	IN 		product.category%TYPE,
  p_stock 	IN 		product.stock%TYPE,
  p_price 	IN 		product.price%TYPE,
  p_category2 	IN 		product.category2%TYPE
)
IS
BEGIN
	UPDATE product
  SET pname = p_pname, pcontents=p_pcontents , origin=p_origin , unit=p_unit , filename=p_filename , CATEGORY=p_category , stock=p_stock , price=p_price , writedate=SYSDATE , category2=p_category2
  WHERE idx = p_idx;
  COMMIT;
END;

--상품검색
CREATE OR REPLACE procedure product_seller_search
(
	p_sellerid IN		product.sellerid%TYPE,
	p_pcode IN		product.pcode%TYPE,
  p_pname IN		product.pname%TYPE,
  p_origin IN		product.origin%TYPE,
  p_category IN		product.category%TYPE,
  p_category2 IN		product.category2%TYPE,
  p_writedate IN		VARCHAR2,
  product_record 			OUT		 SYS_REFCURSOR,
  v_start             IN          NUMBER,
	v_end               IN          NUMBER
)
AS
BEGIN
	OPEN product_record FOR
   SELECT B.idx, pcode, pname, filename, CATEGORY,category2, price, sell_num, writedate
   FROM
   	(SELECT rownum AS rnum, A.idx, A.pcode, A.pname, A.filename, A.CATEGORY, A.category2, A.price, A.sell_num, A.writedate
   FROM
		(SELECT idx, pcode, pname, filename, CATEGORY,category2, price, sell_num, writedate, sellerid, origin
			FROM product ORDER BY writedate DESC) A
			WHERE rownum <= v_end
      AND sellerid = p_sellerid
      AND
      (
			pcode LIKE CONCAT('%',(CONCAT(p_pcode,'%')))
			AND pname LIKE CONCAT('%',(CONCAT(p_pname,'%')))
			AND origin LIKE CONCAT('%',(CONCAT(p_origin,'%')))
			AND category LIKE CONCAT('%',(CONCAT(p_category,'%')))
			AND category2 LIKE CONCAT('%',(CONCAT(p_category2,'%')))
			AND TO_CHAR(writedate, 'yyyy-mm-dd') LIKE CONCAT('%',(CONCAT(p_writedate,'%')))
      )
      ) B
   WHERE B.rnum >= v_start;
END;

--상품검색_seller_Total_count
   CREATE OR REPLACE procedure PRODUCT_SELLER_SEARCH_TOTAL_COUNT
(
	p_sellerid IN		product.sellerid%TYPE,
	p_pcode IN		product.pcode%TYPE,
  p_pname IN		product.pname%TYPE,
  p_origin IN		product.origin%TYPE,
  p_category IN		product.category%TYPE,
  p_category2 IN		product.category2%TYPE,
  p_writedate IN		VARCHAR2,
  p_count	OUT	NUMBER
)
IS
BEGIN
  SELECT COUNT(*) INTO p_count
  FROM PRODUCT
	WHERE
	(
	pcode LIKE CONCAT('%',(CONCAT(p_pcode,'%')))
	AND pname LIKE CONCAT('%',(CONCAT(p_pname,'%')))
	AND origin LIKE CONCAT('%',(CONCAT(p_origin,'%')))
	AND category LIKE CONCAT('%',(CONCAT(p_category,'%')))
	AND category2 LIKE CONCAT('%',(CONCAT(p_category2,'%')))
	AND TO_CHAR(writedate, 'yyyy-mm-dd') LIKE CONCAT('%',(CONCAT(p_writedate,'%')))
	) AND sellerid = p_sellerid
  ORDER BY idx DESC;
END;

//msg insert
CREATE OR REPLACE PROCEDURE message_insert
(
	p_SEND_ID			IN			message.SEND_ID%TYPE,
	p_RECEIVE_ID		IN			message.RECEIVE_ID%TYPE,
  p_title		IN			message.title%TYPE,
  p_contents		IN			message.contents%TYPE

)
IS
BEGIN
	INSERT INTO message(idx,SEND_ID,RECEIVE_ID,title,contents)
	VALUES (message_idx_seq.NEXTVAL, p_SEND_ID, p_RECEIVE_ID, p_title, p_contents);
	COMMIT;
END;

--보낸message(삭제안된) 전체 select
CREATE OR REPLACE procedure message_send_selectAll
(
	m_send_id					IN		message.send_id%TYPE,
  message_record 			OUT		 SYS_REFCURSOR,
  v_start             IN          NUMBER,
	v_end               IN          NUMBER
)
AS
BEGIN
   OPEN message_record FOR
   SELECT B.idx, send_id, receive_id, title, contents, writedate, status
   FROM
   	(SELECT rownum AS rnum, A.idx, A.send_id, A.receive_id, A.title, A.contents, A.writedate, A.status
   FROM
		(SELECT idx, send_id, receive_id, title, contents, writedate, status, del_status
			FROM message ORDER BY writedate DESC) A
			WHERE rownum <= v_end AND send_id = m_send_id AND del_status = 0) B
   WHERE B.rnum >= v_start;
END;

--보낸message(삭제안된) 갯수
CREATE OR REPLACE PROCEDURE message_send_total_count
(
	m_send_id IN		message.send_id%TYPE,
  v_count OUT Number
)
IS
BEGIN
	SELECT COUNT(*) INTO v_count
  FROM message
  WHERE send_id = m_send_id AND DEL_STATUS = 0;
END;

--검색된 보낸메시지 selectAll
CREATE OR REPLACE procedure message_send_search
(
	m_send_id					IN		message.send_id%TYPE,
  m_receive_id					IN		message.receive_id%TYPE,
  m_title					IN		message.title%TYPE,
  m_writedate				IN		VARCHAR2,
  message_record 			OUT		 SYS_REFCURSOR,
  v_start             IN          NUMBER,
	v_end               IN          NUMBER
)
AS
BEGIN
   OPEN message_record FOR
   SELECT B.idx, send_id, receive_id, title, contents, writedate, status
   FROM
   	(SELECT rownum AS rnum, A.idx, A.send_id, A.receive_id, A.title, A.contents, A.writedate, A.status
   FROM
		(SELECT idx, send_id, receive_id, title, contents, writedate, status, del_status
			FROM message ORDER BY writedate DESC) A
			WHERE rownum <= v_end
      AND
      send_id = m_send_id
      AND
      del_status = 0
      AND
      (
			receive_id LIKE CONCAT('%',(CONCAT(m_receive_id,'%')))
			AND title LIKE CONCAT('%',(CONCAT(m_title,'%')))
			AND TO_CHAR(writedate, 'yyyy-mm-dd') LIKE CONCAT('%',(CONCAT(m_writedate,'%')))
      )
      ) B
   WHERE B.rnum >= v_start;
END;

--검색된 보낸메시지 conut
CREATE OR REPLACE PROCEDURE message_send_total_count
(
	m_send_id IN		message.send_id%TYPE,
 	 v_count OUT Number
)
IS
BEGIN
	SELECT COUNT(*) INTO v_count
  FROM message
  WHERE send_id = m_send_id AND DEL_STATUS = 0;
END;


CREATE OR REPLACE PROCEDURE MESSAGE_SELECT_ONE
(
	m_idx 					IN			message.idx%TYPE,
	message_record			OUT		SYS_REFCURSOR
)
AS
BEGIN
	OPEN message_record FOR
	SELECT * FROM message
	WHERE idx = m_idx;
END;

CREATE OR REPLACE PROCEDURE MESSAGE_SEND_DELETE
(
	m_idx 	IN 		message.idx%TYPE
)
IS
BEGIN
	UPDATE message
  SET del_status = 1
  WHERE idx = m_idx;
  COMMIT;
END;


-- 받은 메시지 삭제
CREATE OR REPLACE PROCEDURE MESSAGE_receive_DELETE
(
	m_idx 	IN 		message.idx%TYPE
)
IS
BEGIN
	UPDATE message
  SET del_status2 = 1
  WHERE idx = m_idx;
  COMMIT;
END;

--받은 메시지 검색 select
CREATE OR REPLACE procedure MESSAGE_receive_SEARCH
(
	m_send_id					IN		message.send_id%TYPE,
  m_receive_id					IN		message.receive_id%TYPE,
  m_title					IN		message.title%TYPE,
  m_writedate				IN		VARCHAR2,
  message_record 			OUT		 SYS_REFCURSOR,
  v_start             IN          NUMBER,
	v_end               IN          NUMBER
)
AS
BEGIN
   OPEN message_record FOR
   SELECT B.idx, send_id, receive_id, title, contents, writedate, status
   FROM
   	(SELECT rownum AS rnum, A.idx, A.send_id, A.receive_id, A.title, A.contents, A.writedate, A.status
   FROM
		(SELECT idx, send_id, receive_id, title, contents, writedate, status, del_status2
			FROM message ORDER BY writedate DESC) A
			WHERE rownum <= v_end
      AND
      receive_id = m_receive_id
      AND
      del_status2 = 0
      AND
      (
			send_id LIKE CONCAT('%',(CONCAT(m_send_id,'%')))
			AND title LIKE CONCAT('%',(CONCAT(m_title,'%')))
			AND TO_CHAR(writedate, 'yyyy-mm-dd') LIKE CONCAT('%',(CONCAT(m_writedate,'%')))
      )
      ) B
   WHERE B.rnum >= v_start;
END;

--받은 메시지 검색 카운트
CREATE OR REPLACE PROCEDURE MESSAGE_receive_SEARCH_TOTAL_COUNT
(
	m_send_id					IN		message.send_id%TYPE,
  m_receive_id					IN		message.receive_id%TYPE,
  m_title					IN		message.title%TYPE,
  m_writedate				IN		VARCHAR2,
  v_count OUT Number
)
IS
BEGIN
	SELECT COUNT(*) INTO v_count
  FROM message
  WHERE receive_id = m_receive_id AND DEL_STATUS2 = 0
  AND
 (
		send_id LIKE CONCAT('%',(CONCAT(m_send_id,'%')))
		AND title LIKE CONCAT('%',(CONCAT(m_title,'%')))
		AND TO_CHAR(writedate, 'yyyy-mm-dd') LIKE CONCAT('%',(CONCAT(m_writedate,'%')))
  )ORDER BY writedate DESC;
END;

--받은메시지함 select
CREATE OR REPLACE procedure MESSAGE_receive_SELECTALL
(
	m_receive_id					IN		message.receive_id%TYPE,
  message_record 			OUT		 SYS_REFCURSOR,
  v_start             IN          NUMBER,
	v_end               IN          NUMBER
)
AS
BEGIN
   OPEN message_record FOR
   SELECT B.idx, send_id, receive_id, title, contents, writedate, status
   FROM
   	(SELECT rownum AS rnum, A.idx, A.send_id, A.receive_id, A.title, A.contents, A.writedate, A.status
   FROM
		(SELECT idx, send_id, receive_id, title, contents, writedate, status, del_status2
			FROM message ORDER BY writedate DESC) A
			WHERE rownum <= v_end AND receive_id = m_receive_id AND del_status2 = 0) B
   WHERE B.rnum >= v_start;
END;

--받은 메세지함 카운트
CREATE OR REPLACE PROCEDURE MESSAGE_receive_TOTAL_COUNT
(
	m_receive_id IN		message.receive_id%TYPE,
  v_count OUT Number
)
IS
BEGIN
	SELECT COUNT(*) INTO v_count
  FROM message
  WHERE receive_id = m_receive_id AND DEL_STATUS2 = 0;
END;

--읽지않음을 읽음으로
CREATE OR REPLACE PROCEDURE MESSAGE_RECEIVE_READ
(
	m_idx 	IN 		message.idx%TYPE
)
IS
BEGIN
	UPDATE message
  SET status = '읽음'
  WHERE idx = m_idx;
  COMMIT;
END;

--주문 selectAll
CREATE OR REPLACE procedure orders_seller_selectall
(
	p_sellerid					IN		product.sellerid%TYPE,
  product_record 			OUT		 SYS_REFCURSOR,
  v_start             IN          NUMBER,
	v_end               IN          NUMBER
)
AS
BEGIN
   OPEN product_record FOR
   SELECT B.USER_NAME,B.order_idx,B.idx,B.pname,B.USER_ID,B.DEL_PRICE,B.TOTALPRICE,B.RECEIVER_NAME,B.del_name,B.DEL_CODE,B.PAY,B.STATUS,B.PAY_DATE
FROM
   	(SELECT rownum AS rnum,A.USER_NAME,A.order_idx,A.idx,A.pname,A.USER_ID,A.DEL_PRICE,A.TOTALPRICE,A.RECEIVER_NAME,A.del_name,A.DEL_CODE,A.PAY,A.STATUS,A.PAY_DATE
   	 FROM
				(
        	SELECT c.USER_NAME,o.order_idx,s.idx,p.pname, s.USER_ID,s.DEL_PRICE,s.TOTALPRICE,s.RECEIVER_NAME,s.del_name,s.DEL_CODE,s.PAY,s.STATUS,s.PAY_DATE,p.sellerid
					FROM
						(((ORDER_detial o
						INNER JOIN product p ON o.pcode = p.pcode)
						INNER JOIN orders s ON o.idx = s.idx)
						INNER JOIN CUSTOMER c ON o.user_id = c.user_id)
          WHERE p.SELLERID=p_sellerid
					ORDER BY o.order_idx DESC
          ) A
		 WHERE rownum <= v_end)B
WHERE B.rnum >= v_start;
END;

--주문 count
CREATE OR REPLACE PROCEDURE orders_seller_total_count
(
	v_sellerid IN		product.sellerid%TYPE,
  v_count OUT Number
)
IS
BEGIN
	SELECT COUNT(*) INTO v_count
	FROM (((ORDER_detial o
	INNER JOIN product p ON o.pcode = p.pcode)
	INNER JOIN orders s ON o.idx = s.idx)
	INNER JOIN CUSTOMER c ON o.user_id = c.user_id)
	WHERE p.sellerid = v_sellerid;
END;

--OrderSeller update
CREATE OR REPLACE PROCEDURE ORDERS_SELLER_UPDATE
(
	o_idx 	IN 		orders.idx%TYPE,
  o_receive_name 	IN 		orders.RECEIVER_NAME%TYPE,
  o_phone 	IN 		orders.phone%TYPE,
  o_zipcode 	IN 		orders.zipcode%TYPE,
  o_address1 	IN 		orders.address1%TYPE,
  o_address2 	IN 		orders.address2%TYPE,
  o_del_name 	IN 		orders.del_name%TYPE,
  o_del_code IN 		orders.del_code%TYPE,
  o_del_message	IN 		orders.del_message%TYPE

)
IS
BEGIN
	UPDATE orders
  SET RECEIVER_NAME = o_receive_name, phone = o_phone, zipcode = o_zipcode , address1 = o_address1, address2 = o_address2, del_name = o_del_name, del_code = o_del_code, del_message = o_del_message
  WHERE idx = o_idx;
  COMMIT;
END;